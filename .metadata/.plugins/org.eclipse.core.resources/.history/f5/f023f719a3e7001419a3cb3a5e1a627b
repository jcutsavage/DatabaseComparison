package performance;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.DBCursor;
import com.mongodb.MongoClient;
import com.mongodb.QueryBuilder;

import java.util.ArrayList;

/**
 * 
 * @author John Cutsavage
 * @author Sharmeen Jahan
 * @author Drew Whittaker
 *
 * MongoDB implementation of Query class.
 */
public class MongoDBQuery extends Query {
	
	private MongoClient client;
	private DB employeeDB;
	private DBCollection empColl, deptColl, mgrColl, salColl, titleColl, deptEmpColl;
	
	public void run(){
		initConnection();
		managerSalaries();
	}
	
	/**
	 * Sets up the connection to Mongo server
	 */
	public void initConnection(){
		try{   
	    	  // To connect to mongodb server
	         client = new MongoClient( "localhost" , 27017 );
	         
	         // Now use the employee database
	         employeeDB = client.getDB( "employees" );
	         
	         empColl = employeeDB.getCollection("employees");
	         deptColl = employeeDB.getCollection("departments");
	         mgrColl = employeeDB.getCollection("dept_manager");
	         salColl = employeeDB.getCollection("salaries");
	         titleColl = employeeDB.getCollection("titles");
	         deptEmpColl = employeeDB.getCollection("dept_emp");
	      }
	      catch (Exception e)
	      {
	    	  System.out.println(e.getMessage());
	      }
	}
	
	/**
	 * Mongo Implementation of abstract method.
	 * List all managers, their departments, and their salaries.
	 */
	public void managerSalaries(){
		try {
			long startTime = System.currentTimeMillis();
			
			DBCursor managers = mgrColl.find();
			
			ArrayList<DBObject> list = new ArrayList<DBObject>();
			
			while(managers.hasNext()){
				DBObject managerInfo = new BasicDBObject();
				DBObject currentManager = managers.next();
				
				Object managerId = currentManager.get("emp_no");
				DBObject idSearch = new BasicDBObject();
				idSearch.put("_id", managerId);
				
				DBObject employee = empColl.findOne(idSearch);
				
				managerInfo.put("first_name", employee.get("first_name"));
				managerInfo.put("last_name", employee.get("last_name"));
				
				Object deptId = currentManager.get("dept_no");
				DBObject deptSearch = new BasicDBObject();
				deptSearch.put("_id", deptId);
				
				DBObject department = deptColl.findOne(deptSearch);
				
				managerInfo.put("dept_name", department.get("dept_name"));
				
				DBObject salarySearch = new BasicDBObject();
				salarySearch.put("emp_no", managerId);
				
				DBObject salary = salColl.findOne(salarySearch);
				
				managerInfo.put("salary", salary);
				
				list.add(managerInfo);
			}
			
			long endTime = System.currentTimeMillis();
			
			long totalTime = endTime - startTime;
			
			printQuery(list);
			
			System.out.println("Total time to execute query: " + totalTime + " milliseconds");
			}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void printQuery(ArrayList<DBObject> list){
		for(int i = 0; i < list.size(); i++){
			System.out.println(list.get(i));
		}
	}
}
