package performance.NewQueries;

import java.util.Iterator;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Date;

import com.mongodb.AggregationOptions;
import com.mongodb.AggregationOutput;
import com.mongodb.BasicDBObject;
import com.mongodb.Cursor;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.MapReduceCommand;  
import com.mongodb.MapReduceOutput;  
import com.mongodb.Mongo;
import com.mongodb.QueryBuilder;
import com.mongodb.QueryOperators;

/**
 * 
 * @author John Cutsavage
 * 
 * Implementation of the Query interface for MongoDB.
 *
 */
public class MongoQueries extends Query {
	private MongoClient client;
	private DB db;
	private DBCollection dColl, dmColl, deColl, eColl, 
			sColl, tColl,rColl ;	//collection variable to get the tables from database.
	
	/**
	 * Initializes connection to MongoDB server, using the employees
	 * database.
	 */
	public void initConnection() {
		try{   
			// To connect to mongodb server
			client = new MongoClient( "localhost" , 27017 );

			// Now use the employees database
			db = client.getDB( "employees" );

			// Set up each collection.
			dColl = db.getCollection("departments");
			dmColl = db.getCollection("dept_manager");
			deColl = db.getCollection("dept_emp");
			eColl = db.getCollection("employees");
			sColl = db.getCollection("salaries");
			tColl = db.getCollection("titles");
			rColl=db.getCollection("result");
			rColl.drop();
			rColl=db.getCollection("result");


		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
	}

	/**
	 * Get the employee numbers who get salaries above the parameter value.
	 * @param salary The minimum salary to be included in the query.
	 */
	public void empNoOfCertainSalary(int salary) {
		rColl.drop();
		rColl = db.getCollection("result");
		
		//Create a new index for the salary field
		sColl.createIndex(new BasicDBObject("salary", 1));
		
		System.out.println("empNoOfCertainSalary");
		
		long startTime = System.currentTimeMillis();
		
		//Build query that searches for salaries above the given amount
		DBObject query = new QueryBuilder()
		.start().put("salary").greaterThan(salary).get();
		
		DBCursor employees = sColl.find(query);
		
		
		long endTime = System.currentTimeMillis();
		
		long runTime = endTime - startTime;
		
		employees.sort(new BasicDBObject("emp_no", 1));
		
		/*
		 * Because the salaries collection stores Object IDs instead of
		 * integers for the emp_no field, a join is needed to find the actual
		 * employee number. This was not included in the run time.
		 */
		while(employees.hasNext()){
			DBObject convert = new BasicDBObject();
			convert.put("_id", employees.next().get("emp_no"));
			DBObject emp = eColl.findOne(convert);
			
			DBObject empNo = new BasicDBObject();
			empNo.put("emp_no", emp.get("emp_no"));
			
			rColl.insert(empNo);
		}
		
		System.out.println("Time to execute: " + runTime  + "ms");
		
		printQuery();
		System.out.println();
	}

	/**
	 * 
	 * This method is not used for this implementation. See
	 * avgSalaryAfterDate(Date date).
	 */
	public void avgSalary(String date) {}
	
	/**
	 * 
	 * This method prints the first name, last name and max(salary) of an employee which requires joining 
	 * two collections.
	 */
	public void empNameAndSalary() {
		rColl.drop();
		rColl = db.getCollection("result");
		//Create a new index for the salary field

		eColl.createIndex( new BasicDBObject("last_name", 1));
		sColl.createIndex(new BasicDBObject("salary", 1));
		System.out.println("empNameAndSalary(Mongodb) with indexing");

		long begin=System.currentTimeMillis();

		DBObject match = new BasicDBObject("$match", new BasicDBObject("last_name", "Simmel"));
		
		AggregationOutput out = eColl.aggregate(match);
		
		Iterator<DBObject> resultList = out.results().iterator();
		
		while(resultList.hasNext()){
			int id = (Integer) resultList.next().get("_id");
		}
		
		long end = System.currentTimeMillis();
		System.out.println("Time to execute = " + Long.toString(end-begin) + " MilliSeconds" );
		printQuery();
		System.out.println();

	}

	
	/**
	 * Get the average salary of all employees that started after a certain date.
	 * @param date A date in the YYYY-MM-DD format.
	 */
	public void avgSalaryAfterDate(Date date) {
		rColl.drop();
		rColl = db.getCollection("result");
		
		//Create a new index for the from_date field
		sColl.createIndex(new BasicDBObject("from_date", 1));
		
		System.out.println("avgSalaryAfterDate");
		
		long startTime = System.currentTimeMillis();
		
		//Find all salaries after date
		DBObject match = new BasicDBObject("$match", new BasicDBObject("from_date", new BasicDBObject("$gt", date)));
		
		//Calculate average of all salaries returned by match
		DBObject groupFields = new BasicDBObject("_id", null);
		groupFields.put("average", new BasicDBObject("$avg", "$salary"));
		DBObject group = new BasicDBObject("$group", groupFields);
		
		//Run aggregation on match and group
		AggregationOutput out = sColl.aggregate(match, group);
		Iterable<DBObject> results = out.results();
		
		long endTime = System.currentTimeMillis();
		
		long runTime = endTime - startTime;
		
		
		System.out.println("Time to execute: " + runTime  + "ms");
		
		System.out.println(results);
		System.out.println();
	}

	/**
	 * Find the average salary of all employees in the salaries collection.
	 */
	public void avgSalary() {
		rColl.drop();
		rColl = db.getCollection("result");
		
		System.out.println("avgSalary");
		
		long startTime = System.currentTimeMillis();
		
		//Calculate average salaries of all entries
		DBObject groupFields = new BasicDBObject("_id", null);
		groupFields.put("average", new BasicDBObject("$avg", "$salary"));
		DBObject group = new BasicDBObject("$group", groupFields);
		
		//Run aggregation pipeline of group
		AggregationOutput out = sColl.aggregate(group);
		Iterable<DBObject> results = out.results();
	
		long endTime = System.currentTimeMillis();
		
		long runTime = endTime - startTime;
		
		System.out.println("Time to execute: " + runTime  + "ms");
		
		System.out.println(results);
		System.out.println();
	}
	
	/**
	 * Prints the result collections, which holds a query's result.
	 */
	public void printQuery(){
		DBCursor print = rColl.find();
		
		while(print.hasNext()){
			System.out.println(print.next());
		}
	}
	
	/**
	 * This method is filler for this version.
	 */
	public void resetCache(){}

}
