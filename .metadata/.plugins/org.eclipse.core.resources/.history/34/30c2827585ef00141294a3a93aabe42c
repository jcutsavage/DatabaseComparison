package performance;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import com.mongodb.AggregationOutput;
import com.mongodb.BasicDBObject;
import com.mongodb.Cursor;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.MapReduceCommand;  
import com.mongodb.MapReduceOutput;  
import com.mongodb.Mongo;  


public class MongoDBQuery extends Query{
	MongoClient mongoClient;
	DB db;
	DBCollection dColl, dmColl, deColl, eColl, sColl, tColl,rColl ;	//collection variable to get the tables from database.

	public void run(){
		initConnection();
		managerSalaries();
	}
	
	//Initialize the connection and get the database from mongodb instance.
	public void initConnection(){
		try{   
			// To connect to mongodb server
			mongoClient = new MongoClient( "localhost" , 27017 );

			// Now use your databases
			db = mongoClient.getDB( "employees" );

			// getting all the collecitons.
			dColl = db.getCollection("departments");
			dmColl = db.getCollection("dept_manager");
			deColl = db.getCollection("dept_emp");
			eColl = db.getCollection("employees");
			sColl = db.getCollection("salaries");
			tColl = db.getCollection("titles");
			rColl=db.getCollection("result");
			rColl.drop();
			rColl=db.getCollection("result");


		}
		catch (Exception e)
		{
			System.out.println(e.getMessage());
		}
	}

	
	public void managerSalaries()
	{
		
		long begin=System.currentTimeMillis();

		ArrayList<DBObject> listResult = new ArrayList<DBObject>();

		Cursor salaries;

		DBObject manager;
		DBObject salary = null;

		DBObject match = null;
		BasicDBObject temp = new BasicDBObject();
		DBObject employee, department;
		BasicDBObject employeeQuery = new BasicDBObject();
		BasicDBObject deptQuery = new BasicDBObject();
		BasicDBObject result = new BasicDBObject();

		Cursor managers = dmColl.find();
		try{
			while(managers.hasNext())
			{
				manager=managers.next();
				//temp.clear();

				//make match criteria.
				match = new BasicDBObject("$match", (new BasicDBObject("emp_no", manager.get("emp_no"))));
				//temp.append("emp_no", manager.get("emp_no"));
				//match.put("$match", temp);
				// build the $projection operation
				DBObject fields = new BasicDBObject("emp_no", 1);
				fields.put("to_date", 1);
				fields.put("salary", 1);
				fields.put("_id", 1);
				//fields.put("emp_no", 1);
				DBObject project = new BasicDBObject("$project", fields );

				// Now the $group operation
				DBObject groupFields = new BasicDBObject( "_id", "$emp_no");
				groupFields.put("to_date", new BasicDBObject( "$max", "$to_date"));
				//groupFields.put("salary",new BasicDBObject("$max","$salary"));
				DBObject group = new BasicDBObject("$group", groupFields);


				// run aggregation
				List<DBObject> pipeline = Arrays.asList(match, project, group);
				AggregationOutput output = sColl.aggregate(pipeline);


				//get employee information
				employeeQuery.put("_id",manager.get("emp_no"));
				employee=eColl.findOne(employeeQuery);

				//get department information
				deptQuery.put("_id", manager.get("dept_no"));
				department= dColl.findOne(deptQuery);

				//insert into results

				result.put("first_name", employee.get("first_name"));
				result.put("last_name", employee.get("last_name"));
				result.put("emp_id",employee.get("_id"));
				for (DBObject res : output.results()) {
					salary = sColl.findOne((new BasicDBObject("emp_no", res.get("_id")).append("to_date", res.get("to_date"))));
					result.put("salary", salary.get("salary"));
					result.put("department", department.get("dept_name"));

					listResult.add(res);
				}

				rColl.insert(result);

				employeeQuery.clear();
				result.clear();

			}
			
			printQuery(listResult);

			long end=System.currentTimeMillis();
			System.out.println("total time to insert using .find() method:" + Long.toString(end-begin) + " MilliSeconds" );
		}
		catch(Exception e)
		{
			System.out.println("Error:"+e.getMessage());
			System.out.println(salary.get("_id"));
		}
	}
	
	public void printQuery(ArrayList<DBObject> list){
		for(int i = 0; i < list.size(); i++){
			System.out.println(list.get(i));
		}
	}

}